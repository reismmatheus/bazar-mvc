<style>
    .pb-20{
        padding-bottom: 20px;
    }
</style>

@model BazarMVC.Models.ProdutosViewModels.ProdutosCreateViewModel

@{
    ViewBag.Title = "Cadastro de Produtos";
}

<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Cadastro de Produtos</h1>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>
<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <!-- left column -->
            <div class="col-md-12">
                <!-- general form elements -->
                <div class="card">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        
                        for (int i = 0; i < Model.ListaVendedores.Count; i++)
                        {
                            @Html.HiddenFor(m => Model.ListaVendedores[i].Id)
                            @Html.HiddenFor(m => Model.ListaVendedores[i].Nome)
                            @Html.HiddenFor(m => Model.ListaVendedores[i].Sobrenome)
                        }

                        if (!string.IsNullOrEmpty(Model.IdVendedor))
                        {
                            @Html.Hidden(Model.IdVendedor)
                        }

                        if (ViewBag.MensagemErro != null)
                        {
                            <p class="text-danger margin-y">@ViewBag.MensagemErro</p>
                        }
                        <div class="card-body">
                            <div class="row">
                                <div class="col-sm-12 col-md-6">
                                    <div class="form-group">
                                        <label for="exampleInputPassword1">Nome do Produto</label>
                                        <input type="text" class="form-control" id="exampleInputPassword1" placeholder="Nome..." name="Nome" value="@Model.Nome">
                                        @Html.ValidationMessageFor(m => m.Nome, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6 form-group">
                                    <label for="exampleInputPassword1">Vendedor</label>
                                    @if (User.IsInRole("Admin"))
                                    {
                                        <input list="vendedores" class="form-control" placeholder="Vendedor..." value="@Model.NomeVendedor" name="NomeVendedor"
                                               oninput="console.log(this.value);">
                                        <datalist id="vendedores">
                                            @foreach (var item in Model.ListaVendedores)
                                            {
                                                <option data-value="@item.Id">@item.Nome</option>
                                            }
                                        </datalist>
                                        @Html.ValidationMessageFor(m => m.IdVendedor, "", new { @class = "text-danger" })
                                    }
                                    else
                                    {
                                        <input type="text" class="form-control" name="NomeVendedor" value="@Model.NomeVendedor" readonly>
                                    }
                                </div>
                                <input type="text" name="IdVendedor" id="NomeVendedor" value="@Model.IdVendedor" style="display: none;">
                                <div class="col-sm-12 col-md-6">
                                    <div class="form-group">
                                        <label for="exampleInputPassword1">Preço</label>
                                        <input type="number" class="form-control" id="dinheiro" placeholder="Preço..." min="0.01" max="99999.99" step="0.01" name="Preco" value="@Model.Preco">
                                        @Html.ValidationMessageFor(m => m.Preco, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        <label for="exampleInputPassword1">Quantidade</label>
                                        <input type="number" class="form-control" id="exampleInputPassword1" placeholder="Quantidade..." min="1" step="any" name="Quantidade" value="@Model.Quantidade">
                                        @Html.ValidationMessageFor(m => m.Quantidade, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-sm-12 col-md-6">
                                    <div class="form-group">
                                        <label for="exampleFormControlTextarea1">Descrição</label>
                                        <textarea class="form-control pb-20" id="exampleFormControlTextarea1" rows="4" name="Descricao">@Model.Descricao</textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <button type="submit" class="btn btn-primary" id="Cadastrar">Cadastrar</button>
                        </div>
                    }
                </div>
            </div>
        </div>
</section>

<script>
    var des = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');
    Object.defineProperty(HTMLInputElement.prototype, 'value', {
        get: function () {
            if (this.type === 'text' && this.list) {
                var value = des.get.call(this);
                var opt = [].find.call(this.list.options, function (option) {
                    return option.value === value;
                });
                document.getElementById("NomeVendedor").value = opt ? opt.dataset.value : value
                return opt ? opt.dataset.value : value;
            }
        }
    });
</script>